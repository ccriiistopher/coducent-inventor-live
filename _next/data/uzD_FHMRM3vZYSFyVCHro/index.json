{"pageProps":{"banners":[{"bannerBody":"The new version of the RecyclerView is now available.","bannerTitle":"[New] Fancy RecyclerView v2","image":"img/android-working-with-recycler-view.png","textColor":"#ffffff","backgroundColor":"#004f85"},{"bannerBody":"This is a test banner","bannerTitle":"Banner2","image":"img/1.png","textColor":"#ffffff","backgroundColor":"#67a1ff"}],"extensions":[{"name":"Background","path":"background","description":"Creates a background for widgets. The properties are used to create the style of the widgets. The methods are used when the widgets have already been created.","date":"December 22, 2021 1:45 AM","events":[],"methods":[{"name":"BuildProps","description":"Returns a new property set containing the previously defined properties.","params":[{"name":"*","type":"PropertySet"}]},{"name":"Build","description":"Returns a new set of properties configured to set only the color.","params":[{"name":"color","type":"Text"},{"name":"color","type":"Color"}]},{"name":"SetColor","description":"Changes the background color of the widget.","params":[{"name":"color","type":"Text"},{"name":"color","type":"Color"}]},{"name":"SetTintColor","description":"Applies a color to the background.\n**Info:**\n>Unlike the SetColor method, this one will apply a color over the entire background, including the edges.","params":[{"name":"color","type":"Text"},{"name":"color","type":"Color"}]},{"name":"SetColors","description":"Changes the background colors.\n**Info:**\n>Like the Colors property, it needs a list of Text (HTML Colors) or Colors.","params":[{"name":"colors","type":"List"}]},{"name":"SetStroke","description":"Changes the borders of the background.","params":[{"name":"width","type":"Number"},{"name":"color","type":"Text"},{"name":"color","type":"Color"}]},{"name":"SetFileSource","description":"Changes the background image.\n**Info:**\n>Unlike the corresponding property, this method does accept URLs.","params":[{"name":"src","type":"Text"}]}],"properties":[{"name":"Color","description":"Sets the background color.\n**Block Types:** *Write*\n**Presentation:** *Blocks*","params":[{"name":"*","type":"Text,Color"}]},{"name":"Colors","description":"Sets the background colors.\n**Block Types:** *Write*\n**Presentation:** *Blocks*\n**Info:**\n>This property sets a gradient as the background.\n>The items in the list are colors, Text and Colors are supported.","params":[{"name":"*","type":"List"}]},{"name":"BorderWidth","description":"Sets the thickness of the background edges.\n**Block Types:** *Write*\n**Presentation:** *Blocks*","params":[{"name":"*","type":"Number"}]},{"name":"RippleColor","description":"Sets the color of the wave that is activated when the widget is pressed.\n**Block Types:** *Write*\n**Presentation:** *Blocks*\n**Info:**\n>For the wave effect to show, the widget needs to be clickable.","params":[{"name":"*","type":"Text,Color"}]},{"name":"BorderColor","description":"Sets the color of the background borders.\n**Block Types:** *Write*\n**Presentation:** *Blocks*","params":[{"name":"*","type":"Text,Color"}]},{"name":"BorderRadius","description":"Sets the radius of the corners of the bottom.\n**Block Types:** *Write*\n**Presentation:** *Blocks*","params":[{"name":"*","type":"Number"}]},{"name":"GradientDirection","description":"Sets the direction of the gradient.\n**Block Types:** *Write*\n**Presentation:** *Blocks*\n**Info:**\n>The values ​​are obtained from the property blocks.","params":[{"name":"*","type":"GradientDirection"}]},{"name":"FileSource","description":"Sets the image to be displayed in the background.\n**Block Types:** *Write*\n**Presentation:** *Blocks*\n**Info:**\n>The text should be a path to a file or the name of a file found in the assets of the project.\n>If this block is used, all other properties will be ignored to only display the image.\n>Supports NinePatch images.","params":[{"name":"*","type":"Text"}]},{"name":"TopToBottom","description":"Gradient Direction.\n**Block Types:** *Read*\n**Presentation:** *Blocks*","params":[{"name":"*","type":"GradientDirection"}]},{"name":"BottomToTop","description":"Gradient Direction.\n**Block Types:** *Read*\n**Presentation:** *Blocks*","params":[{"name":"*","type":"GradientDirection"}]},{"name":"LeftToRight","description":"Gradient Direction.\n**Block Types:** *Read*\n**Presentation:** *Blocks*","params":[{"name":"*","type":"GradientDirection"}]},{"name":"RightToLeft","description":"Gradient Direction.\n**Block Types:** *Read*\n**Presentation:** *Blocks*","params":[{"name":"*","type":"GradientDirection"}]},{"name":"BottomLeftTopRight","description":"Gradient Direction.\n**Block Types:** *Read*\n**Presentation:** *Blocks*","params":[{"name":"*","type":"GradientDirection"}]},{"name":"BottomRightTopLeft","description":"Gradient Direction.\n**Block Types:** *Read*\n**Presentation:** *Blocks*","params":[{"name":"*","type":"GradientDirection"}]},{"name":"TopLeftBottomRight","description":"Gradient Direction.\n**Block Types:** *Read*\n**Presentation:** *Blocks*","params":[{"name":"*","type":"GradientDirection"}]},{"name":"TopRightBottomLeft","description":"Gradient Direction.\n**Block Types:** *Read*\n**Presentation:** *Blocks*","params":[{"name":"*","type":"GradientDirection"}]}],"shortDescription":"","group":"fancy-recyclerview-widgets"},{"name":"Fancy RecyclerView 2","path":"fancy-recyclerview-2","description":"Based on the Android RecyclerView widget. This extension adds many functionalities of the RecyclerView for Kodular.","date":"December 6, 2021 4:46 PM","events":[{"name":"OnWidgetClicked","description":"Event generated when any widget is clicked.For this event to be fired by a widget, it must have the respective property,\"Clickable\".","params":[{"name":"position","type":"Number"},{"name":"widgetName","type":"Text"},{"name":"group","type":"Group"}]},{"name":"OnWidgetLongClicked","description":"Event generated when any widget is long clicked.For this event to be fired by a widget, it must have the respective property,\"Clickable\".","params":[{"name":"position","type":"Number"},{"name":"widgetName","type":"Text"},{"name":"group","type":"Group"}]},{"name":"OnBindingRequest","description":"Event launched when a group changes its position and needs to update its widgets.","params":[{"name":"position","type":"Number"},{"name":"listItem","type":"Any"},{"name":"group","type":"Group"},{"name":"viewType","type":"Number"}]},{"name":"OnBindingCustomView","description":"Event fired when the custom widget that is optionally configured in the RecyclerView is visible on the screen or needs to be updated."},{"name":"FastScrolled","description":"Event launched when the \"Listenable Scroll\" method finished and the group being navigated to is already visible on the screen.","params":[{"name":"position","type":"Number"}]},{"name":"ItemSwiped","description":"Event launched when a group triggers a swipe action.Indicates whether the action corresponds to the right or left side.","params":[{"name":"position","type":"Number"},{"name":"left","type":"Boolean"},{"name":"right","type":"Boolean"}]},{"name":"MultiSelectionOptionSelected","description":"Event triggered when an option is selected in multiple selection mode.","params":[{"name":"title","type":"Text"},{"name":"selectedItems","type":"List"}]}],"methods":[{"name":"AddSelectionIconOption","description":"Adds options with icons to the multi-selection bar.\n**Info:**\n>These options will be added to the selection bar.\n>The icon is the name of a file in assets or the path to an image file.","params":[{"name":"title","type":"Text"},{"name":"icon","type":"Text"}]},{"name":"AddSelectionOption","description":"Adds options to the multi-selection bar.\n**Info:**\n>An option to select all items can be set with the SelectAllTitle property.","params":[{"name":"title","type":"Text"}]},{"name":"Build","description":"Finishes with the recyclerview configuration and adds it inside the specified component.\n**Info:**\n>It is preferable not to add it inside a Scroll Arrangement, but it can be added inside a Swipe Refresh Layout or other arrangement.","params":[{"name":"component","type":"Component"},{"name":"data","type":"List"}]},{"name":"GetCurrentScrollPixels","description":"Returns the offset position the recyclerview is currently in, the value is returned in pixels."},{"name":"GetGroupForPosition","description":"Returns the group corresponding to an adapter position (linked to the number of items in the data list). It will only return a valid position if the corresponding group is visible on the screen.\n**Info:**\n>It should be used when we are sure that the item corresponding to the position is visible on the screen, for example after using the ListenableScroll method.","params":[{"name":"position","type":"Number"}]},{"name":"GetLastSyncedWidget","description":"Returns the last widget synced with the RecyclerView.\n**Info:**\n>The returned widget cannot be edited with the Kodular blocks, but it does allow it to be used with extensions such as the Widget Animator or widget Screenshot."},{"name":"GetRootName","description":"Returns a name that is used to identify the first widget to be added to the RecyclerView model.\n**Info:**\n>This block tells the RecyclerView that it is starting to create the model."},{"name":"GetScrollRangePixels","description":"Returns the maximum scroll position of the RecyclerView. It is returned in pixels."},{"name":"ListenableScrollTo","description":"Causes the RecyclerView to go to a certain position and calls the FastScroll event when it is done scrolling.","params":[{"name":"position","type":"Number"}]},{"name":"NotifyDataSetChanged","description":"Notifies the recyclerview that a change occurred in the data list, because of this, it will have to update the widgets."},{"name":"ScrollTo","description":"Causes the RecyclerView to scroll to the specified position. It does not notify when it is done.","params":[{"name":"position","type":"Number"}]},{"name":"SetCustomView","description":"Sets the component that will be displayed among the RecyclerView items.","params":[{"name":"component","type":"Component"}]},{"name":"SetGridManager","description":"Sets the layout manager to Grid, so that the items in the RecyclerView will be displayed with columns or rows, depending on the orientation.","params":[{"name":"spanCount","type":"Number"},{"name":"reverse","type":"Boolean"},{"name":"portrait","type":"Boolean"}]},{"name":"SetListManager","description":"Sets the layout manager to List, so the items in the RecyclerView will be listed horizontally or vertically depending on the orientation.","params":[{"name":"reverse","type":"Boolean"},{"name":"startFromBottom","type":"Boolean"},{"name":"portrait","type":"Boolean"}]},{"name":"SetScrollListener","description":"It establishes the procedure that is responsible for listening to the changes of state when scrolling in the RecyclerView.\n**Info:**\n>The addresses are automatically detected depending on the layout manager.\n>In a horizontal manager the procedure should have the following parameters: [canScrollToLeft, canScrollToRight, isIddle]\n>In a vertical manager they should be: [canScrollToTop, canScrollToBottom, isIddle]\n>The isIddle parameter refers to whether the RecyclerView is idle.","params":[{"name":"procedure","type":"Text"}]},{"name":"SetStaggeredGridManager","description":"Sets the layout manager as a staggered grid. It will be displayed in columns or rows depending on the orientation.","params":[{"name":"spanCount","type":"Number"},{"name":"reverse","type":"Boolean"},{"name":"portrait","type":"Boolean"}]},{"name":"SetSwipeForViewTypes","description":"It establishes in which direction or in which directions each type of view can be scrolled.\n**Info:**\n>The letters l, r, and b are used to indicate the left, right, and both sides respectively.\n>Rules structure:\n[view-type]:[side]\nExample:\"4: l, 5: r, 6: b\"","params":[{"name":"types","type":"Text"}]},{"name":"SetViewTypeProvider","description":"It establishes the procedure that is in charge of returning the type of view according to the position that the RecyclerView returns.\n**Info:**\n>The procedure must have the parameters [position, listItem]\n>It must return a type of view, it must be one created previously.","params":[{"name":"procedure","type":"Text"}]},{"name":"SmoothScrollTo","description":"Causes the RecyclerView to scroll smoothly to a specific position.\n**Info:**\n>It does not notify any event if it finished with its task.","params":[{"name":"position","type":"Number"}]},{"name":"Sync","description":"It is mainly used when configuring the RecyclerView for the first time, it tells all the components that depend on it that this RecyclerView is currently being worked on."},{"name":"SyncWidget","description":"Synchronizes a widget with the RecyclerView. It is mainly used to edit the widgets.","params":[{"name":"name","type":"Text"},{"name":"group","type":"Group"}]},{"name":"SyncWithViewType","description":"Synchronizes the RecyclerView and also introduce a new type of view in it.","params":[{"name":"viewType","type":"Number"}]},{"name":"UpdateData","description":"Changes the data list bound to the RecyclerView, notifies you that it should be redrawn according to the new list.","params":[{"name":"list","type":"List"}]},{"name":"UpdateVisibleItem","description":"Notifies the RecyclerView that it has to redraw an item regardless of whether the linked list underwent a change.","params":[{"name":"position","type":"Number"}]}],"properties":[{"name":"DividerColor","description":"Sets the color of the division between the groups.\n**Block Types:** *Write*\n**Presentation:** *Designer, Blocks*","params":[{"name":"*","type":"Color"}],"defValue":"#FFC107"},{"name":"DividerSize","description":"Sets the height/width of the division between the groups.\n**Block Types:** *Write*\n**Presentation:** *Designer, Blocks*","params":[{"name":"*","type":"Number"}]},{"name":"CustomView","description":"Sets whether the RecyclerView will show a component among its groups.\n**Block Types:** *Write*\n**Presentation:** *Designer, Blocks*","params":[{"name":"*","type":"Boolean"}]},{"name":"CustomViewItemsOffset","description":"Sets the number of items to be displayed before displaying the set component.\n**Block Types:** *Write*\n**Presentation:** *Designer, Blocks*","params":[{"name":"*","type":"Number"}]},{"name":"MultiSelection","description":"Sets whether multi-selection is enabled.\n**Block Types:** *Write*\n**Presentation:** *Designer, Blocks*","params":[{"name":"*","type":"Boolean"}]},{"name":"MultiSelectionSuffix","description":"Sets the text that will be displayed after the number of items selected in the selection bar.\n**Block Types:** *Write*\n**Presentation:** *Designer, Blocks*","params":[{"name":"*","type":"Text"}],"defValue":" items"},{"name":"SelectAllTitle","description":"Sets the title of the option button to make a selection of all items.\n**Block Types:** *Write*\n**Presentation:** *Designer, Blocks*","params":[{"name":"*","type":"Text"}],"defValue":"SELECT ALL"},{"name":"MultiSelectionOpacity","description":"Sets the opacity of the group when it is selected.\n**Block Types:** *Write*\n**Presentation:** *Designer, Blocks*\n**Info:**\n>Values range from 0.0 to 1.0","params":[{"name":"*","type":"Number"}],"defValue":"0.5"},{"name":"MultiSelectionColor","description":"Sets the background color of the group when selected.\n**Block Types:** *Write*\n**Presentation:** *Designer, Blocks*","params":[{"name":"*","type":"Color"}],"defValue":"#000000"},{"name":"SwipeActions","description":"Specifies whether swipe actions will be available to the RecyclerView.\n**Block Types:** *Write*\n**Presentation:** *Designer, Blocks*","params":[{"name":"*","type":"Boolean"}],"defValue":"False"},{"name":"SwipeDirection","description":"Specify the available sides to trigger swipe actions. \"Left, Right and Both\".\n**Block Types:** *Write*\n**Presentation:** *Designer*\n**Info:**\n>Sides can be specified for each view type with the \"SetSwipeForViewTypes\" method.","params":[{"name":"*","type":"Text"}],"defValue":"Left"},{"name":"SwipeThreshold","description":"The fraction that the user should move the group to be considered as swiped.\n**Block Types:** *Write*\n**Presentation:** *Designer, Blocks*\n**Info:**\n>Values range from 0.0 to 1.0\n>The fraction is calculated with respect to RecyclerView's bounds.","params":[{"name":"*","type":"Number"}],"defValue":"0.5"},{"name":"SwipeVelocityThreshold","description":"Defines the maximum velocity ItemTouchHelper will ever calculate for pointer movements.\n**Block Types:** *Write*\n**Presentation:** *Designer, Blocks*\n**Info:**\n>Values range from 0.0 to 1.0.\n>If you increase the value, it will be easier for the user to swipe diagonally and if you decrease the value, user will need to make a rather straight finger movement to trigger a swipe.","params":[{"name":"*","type":"Number"}],"defValue":"1.0"},{"name":"SwipeLeftSideColor","description":"Specifies the background color of the action on the left side.\n**Block Types:** *Write*\n**Presentation:** *Designer*","params":[{"name":"*","type":"Color"}],"defValue":"#000000"},{"name":"SwipeRightSideColor","description":"Specifies the background color of the action on the right side.\n**Block Types:** *Write*\n**Presentation:** *Designer*","params":[{"name":"*","type":"Color"}],"defValue":"#000000"},{"name":"SwipeLeftRevealColor","description":"Specifies the color of the wave that indicates that the action on the left side is considered to be launched.\n**Block Types:** *Write*\n**Presentation:** *Designer*","params":[{"name":"*","type":"Color"}],"defValue":"#000000"},{"name":"SwipeRightRevealColor","description":"Specifies the color of the wave that indicates that the action on the right side is considered to be launched.\n**Block Types:** *Write*\n**Presentation:** *Designer*","params":[{"name":"*","type":"Color"}],"defValue":"#000000"},{"name":"SwipeLeftSideIcon","description":"Specifies the image file name that the RecyclerView will display in the action on the left side.\n**Block Types:** *Write*\n**Presentation:** *Designer, Blocks*\n**Info:**\n>The file must be located in the assets of the project. Only the name plus the extension should be entered.\n>If the image is too large it will be resized.","params":[{"name":"*","type":"Asset"}]},{"name":"SwipeRightSideIcon","description":"Specifies the image file name that the RecyclerView will display in the action on the right side.\n**Block Types:** *Write*\n**Presentation:** *Designer, Blocks*","params":[{"name":"*","type":"Asset"}]},{"name":"Visible","description":"Specifies RecyclerView visibility.\n**Block Types:** *Write*\n**Presentation:** *Designer, Blocks*","params":[{"name":"*","type":"Boolean"}]},{"name":"FixedSize","description":"Specifies whether the RecyclerView will have a fixed size.\n**Block Types:** *Write*\n**Presentation:** *Designer, Blocks*\n**Info:**\n>If enabled, the size of the RecyclerView does not depend on its children. This means that it does not have to be constantly resized, thus preventing performance variations.","params":[{"name":"*","type":"Boolean"}]},{"name":"BackgroundColor","description":"Sets the background color of the RecyclerView.\n**Block Types:** *Write*\n**Presentation:** *Designer, Blocks*","params":[{"name":"*","type":"Color"}],"defValue":"#000000"},{"name":"BackgroundAsset","description":"Sets the background image of the RecyclerView.\n**Block Types:** *Write*\n**Presentation:** *Designer, Blocks*\n**Info:**\n>The file must be located in the assets of the project. Only the name plus the extension should be entered.","params":[{"name":"*","type":"Asset"}]},{"name":"Width","description":"Sets the width of the RecyclerView.\n**Block Types:** *Write*\n**Presentation:** *Designer, Blocks*\n**Info:**\n>Allowed values are Automatic and FillParent\n>To specify a different size, change it in the component where the RecyclerView will be created.","params":[{"name":"*","type":"Text"}]},{"name":"Height","description":"Sets the height of the RecyclerView.\n**Block Types:** *Write*\n**Presentation:** *Designer, Blocks*\n**Info:**\n>Allowed values are Automatic and FillParent\n>To specify a different size, change it in the component where the RecyclerView will be created.","params":[{"name":"*","type":"Text"}]}],"shortDescription":"Based on the Android RecyclerView widget. This extension adds many functionalities of the RecyclerView for Kodular.","group":"fancy-recyclerview-2-group"},{"name":"LinearMetrics","path":"linear-metrics","description":"It allows to model an object that specifies the measurements for widgets whose parents are ZLinear Widgets.","date":"December 22, 2021 1:45 AM","events":[],"methods":[{"name":"BuildProps","description":"Returns a new property set containing the previously defined properties.","params":[{"name":"*","type":"PropertySet"}]},{"name":"SetBuildInMetrics","description":"Changes the measurements configured in the widget.","params":[{"name":"width","type":"Number"},{"name":"height","type":"Number"},{"name":"weight","type":"Number"}]}],"properties":[{"name":"MarginLeft","description":"Specifies the extra space on the left side of the widget.\n**Block Types:** *Write*\n**Presentation:** *Blocks*","params":[{"name":"*","type":"Number"}]},{"name":"MarginRight","description":"Specifies the extra space on the right side of the widget.\n**Block Types:** *Write*\n**Presentation:** *Blocks*","params":[{"name":"*","type":"Number"}]},{"name":"MarginTop","description":"Specifies the extra space on the top side of the widget.\n**Block Types:** *Write*\n**Presentation:** *Blocks*","params":[{"name":"*","type":"Number"}]},{"name":"MarginBottom","description":"Specifies the extra space on the bottom side of the widget.\n**Block Types:** *Write*\n**Presentation:** *Blocks*","params":[{"name":"*","type":"Number"}]},{"name":"Margin","description":"Specifies the extra space for all sides of the widget.\n**Block Types:** *Write*\n**Presentation:** *Blocks*\n**Info:**\n>It should be used when all the extra spaces should be the same.\n>Replaces all independent margin values.","params":[{"name":"*","type":"Number"}]},{"name":"Width","description":"Specifies the width of the widget.\n**Block Types:** *Write*\n**Presentation:** *Blocks*","params":[{"name":"*","type":"Number"}]},{"name":"Height","description":"Specifies the height of the widget.\n**Block Types:** *Write*\n**Presentation:** *Blocks*","params":[{"name":"*","type":"Number"}]},{"name":"ForceSpace","description":"Specifies whether the widget should forcibly occupy a space in its parent widget.\n**Block Types:** *Write*\n**Presentation:** *Blocks*\n**Info:**\n>It can be used when all widgets need to occupy the same space or share space equally regardless of their width or height.","params":[{"name":"*","type":"Boolean"}]},{"name":"FillParent","description":"A value that specifies that the widget will occupy all the space in its parent widget.\n**Block Types:** *Read*\n**Presentation:** *Blocks*","params":[{"name":"*","type":"Number"}]},{"name":"FillAutomatic","description":"A value that specifies that the widget will occupy only the space that it needs.\n**Block Types:** *Read*\n**Presentation:** *Blocks*","params":[{"name":"*","type":"Number"}]}],"shortDescription":"","group":null},{"name":"Snap","path":"snap","description":"This extension helps to establish a behavior similar to the ViewPager in the RecyclerView.","date":"December 22, 2021 1:45 AM","events":[{"name":"PositionChange","description":"Event called when the group that is in focus changes, returns its position.","params":[{"name":"position","type":"Number"}]}],"methods":[{"name":"SnapIn","description":"This method connects the snap extension with the specified RecyclerView.","params":[{"name":"recycler","type":"RecyclerView"}]},{"name":"SnapOut","description":"Detaches the extension from any RecyclerView that it is linked to."}],"properties":[{"name":"AnimationScaleSize","description":"Specifies the size to which groups that are not in focus are scaled.\n**Block Types:** *Write*\n**Presentation:** *Designer*\n**Info:**\n>Values from 0.0 to 1.0(normal size)","params":[{"name":"*","type":"Number"}],"defValue":"0.85"},{"name":"FirsItemOffset","description":"Specifies the extra space to add to the beginning and end of the RecyclerView.\n**Block Types:** *Write*\n**Presentation:** *Designer*","params":[{"name":"*","type":"Number"}]},{"name":"LinearSnap","description":"Determines the behavior of the swipe, when LinearSnap is on it will center the focused element. When disabled, the behavior will be similar to the ViewPager.\n**Block Types:** *Write*\n**Presentation:** *Designer*","params":[{"name":"*","type":"Boolean"}],"defValue":"False"},{"name":"ScaleAnimation","description":"Specifies whether the scaling effect will be activated in the groups each time the focus group changes.\n**Block Types:** *Write*\n**Presentation:** *Designer*","params":[{"name":"*","type":"Boolean"}],"defValue":"False"}],"shortDescription":"","group":null},{"name":"StackMetrics","path":"stack-metrics","description":"It allows to model an object that specifies the measurements for widgets whose parents are ZStack Widgets.","date":"December 22, 2021 1:45 AM","events":[],"methods":[{"name":"BuildProps","description":"Returns a new property set containing the previously defined properties.","params":[{"name":"*","type":"PropertySet"}]}],"properties":[{"name":"AlignParentTop","description":"Specifies whether the widget will be positioned relative to the top area of ​​its parent widget.\n**Block Types:** *Write*\n**Presentation:** *Blocks*","params":[{"name":"*","type":"Boolean"}]},{"name":"AlignParentBottom","description":"Specifies whether the widget will be positioned relative to the bottom area of its parent widget.\n**Block Types:** *Write*\n**Presentation:** *Blocks*","params":[{"name":"*","type":"Boolean"}]},{"name":"AlignParentLeft","description":"Specifies whether the widget will be positioned relative to the left area of its parent widget.\n**Block Types:** *Write*\n**Presentation:** *Blocks*","params":[{"name":"*","type":"Boolean"}]},{"name":"AlignParentRight","description":"Specifies whether the widget will be positioned relative to the right area of its parent widget.\n**Block Types:** *Write*\n**Presentation:** *Blocks*","params":[{"name":"*","type":"Boolean"}]},{"name":"AlignParentStart","description":"Specifies whether the widget will be positioned relative to the start(left top) of its parent widget.\n**Block Types:** *Write*\n**Presentation:** *Blocks*","params":[{"name":"*","type":"Boolean"}]},{"name":"AlignParentEnd","description":"Specifies whether the widget will be positioned relative to the end(right bottom) of its parent widget.\n**Block Types:** *Write*\n**Presentation:** *Blocks*","params":[{"name":"*","type":"Boolean"}]},{"name":"CenterInParent","description":"Specifies whether the widget should be centered on its parent widget.\n**Block Types:** *Write*\n**Presentation:** *Blocks*","params":[{"name":"*","type":"Boolean"}]},{"name":"ToLeftOf","description":"The widget will be positioned relatively to the left side of the indicated widget.\n**Block Types:** *Write*\n**Presentation:** *Blocks*","params":[{"name":"*","type":"Text"}]},{"name":"ToRightOf","description":"The widget will be positioned relatively to the right side of the indicated widget.\n**Block Types:** *Write*\n**Presentation:** *Blocks*","params":[{"name":"*","type":"Text"}]},{"name":"Above","description":"The widget will be positioned relatively to the top side of the indicated widget.\n**Block Types:** *Write*\n**Presentation:** *Blocks*","params":[{"name":"*","type":"Text"}]},{"name":"Below","description":"The widget will be positioned relatively to the bottom side of the indicated widget.\n**Block Types:** *Write*\n**Presentation:** *Blocks*","params":[{"name":"*","type":"Text"}]},{"name":"CenterHorizontal","description":"The widget will be centered horizontally on its parent widget.\n**Block Types:** *Write*\n**Presentation:** *Blocks*","params":[{"name":"*","type":"Boolean"}]},{"name":"CenterVertical","description":"The widget will be centered vertically on its parent widget.\n**Block Types:** *Write*\n**Presentation:** *Blocks*","params":[{"name":"*","type":"Boolean"}]},{"name":"ToStartOf","description":"The widget will be positioned relatively to the start(top left) of the indicated widget.\n**Block Types:** *Write*\n**Presentation:** *Blocks*","params":[{"name":"*","type":"Text"}]},{"name":"ToEndOf","description":"The widget will be positioned relatively to the end of the indicated widget.\n**Block Types:** *Write*\n**Presentation:** *Blocks*","params":[{"name":"*","type":"Text"}]},{"name":"MarginLeft","description":"Specifies the extra space on the left side of the widget.\n**Block Types:** *Write*\n**Presentation:** *Blocks*","params":[{"name":"*","type":"Number"}]},{"name":"MarginRight","description":"Specifies the extra space on the right side of the widget.\n**Block Types:** *Write*\n**Presentation:** *Blocks*","params":[{"name":"*","type":"Number"}]},{"name":"MarginTop","description":"Specifies the extra space on the top side of the widget.\n**Block Types:** *Write*\n**Presentation:** *Blocks*","params":[{"name":"*","type":"Number"}]},{"name":"MarginBottom","description":"Specifies the extra space on the bottom side of the widget.\n**Block Types:** *Write*\n**Presentation:** *Blocks*","params":[{"name":"*","type":"Number"}]},{"name":"Margin","description":"Specifies the extra space for all sides of the widget.\n**Block Types:** *Write*\n**Presentation:** *Blocks*\n**Info:**\n>It should be used when all the extra spaces should be the same.\n>Replaces all independent margin values.","params":[{"name":"*","type":"Number"}]},{"name":"Width","description":"Specifies the width of the widget.\n**Block Types:** *Write*\n**Presentation:** *Blocks*","params":[{"name":"*","type":"Number"}]},{"name":"Height","description":"Specifies the height of the widget.\n**Block Types:** *Write*\n**Presentation:** *Blocks*","params":[{"name":"*","type":"Number"}]},{"name":"FillParent","description":"A value that specifies that the widget will occupy all the space in its parent widget.\n**Block Types:** *Read*\n**Presentation:** *Blocks*","params":[{"name":"*","type":"Number"}]},{"name":"FillAutomatic","description":"A value that specifies that the widget will occupy only the space that it needs.\n**Block Types:** *Read*\n**Presentation:** *Blocks*","params":[{"name":"*","type":"Number"}]}],"shortDescription":"","group":null}],"platforms":[{"name":"Kodular","url":"https://www.kodular.io","backgroundColor":"#6800ff","textColor":"#ffffff"},{"name":"AppInventor","url":"https://appinventor.mit.edu/","backgroundColor":"#2be289","textColor":"#ffffff"},{"name":"Niotron","url":"https://niotron.com/","backgroundColor":"#ff4fdc","textColor":"#f9f9f9"}]},"__N_SSG":true}