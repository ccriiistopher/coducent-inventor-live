{"pageProps":{"extension":{"name":"Dynamic RecyclerView (Documentation)","path":"dynamic_rrecyclerview_docs","description":"Documentation for DynamicRecyclerView\n\n*For all blocks, **\\*(asterisk)** means the result type of that block*","date":"February 17, 2022 4:55 PM","events":[],"methods":[{"name":"Build","description":"This block allows you to initialize the component with the specified data list.","params":[{"name":"id","type":"Number"},{"name":"data","type":"List"}]},{"name":"CanScrollHorizontally","defValue":"Boolean","description":"Returns whether the component can scroll horizontally to the indicated side.","params":[{"name":"id","type":"Number"},{"name":"direction","type":"Number"},{"name":"*","type":"Boolean"}]},{"name":"CanScrollVertically","description":"Returns whether the component can scroll vertically to the indicated side.","params":[{"name":"id","type":"Number"},{"name":"direction","type":"Number"},{"name":"*","type":"Boolean"}]},{"name":"Create","description":"Create a new instance of RecyclerView with a specific size.","params":[{"name":"id","type":"Number"},{"name":"parent","type":"Arrangement"},{"name":"width","type":"Number"},{"name":"height","type":"Number"}]},{"name":"CreateGridManager","params":[{"name":"spanCount","type":"Number"},{"name":"horizontal","type":"Boolean"},{"name":"reverse","type":"Boolean"},{"name":"stackFromEnd","type":"Boolean"},{"name":"*","type":"LayoutManager"}],"description":"Create and return a new GridLayoutManager instance, which will allow us to display the RecyclerView as a Grid layout\n\n**spanCount:** Number of columns (when it is vertical) or rows (horizontal)\n\n**stackFromEnd** will specify whether the RecyclerView is going to take the bottom side as starting."},{"name":"CreateLinearManager","description":"Create and return a new GridLayoutManager instance, which will allow us to display the RecyclerView as a List layout\n\n**stackFromEnd** will specify whether the RecyclerView is going to take the bottom side as starting.","params":[{"name":"horizontal","type":"Boolean"},{"name":"reverse","type":"Boolean"},{"name":"stackFromEnd","type":"Boolean"},{"name":"*","type":"LinearLayout"}]},{"name":"CreateRecycler","params":[{"name":"id","type":"Number"},{"name":"parent","type":"Arrangement"}],"description":"Create a new component with the default size."},{"name":"CreateStaggeredGridManager","description":"Create and return a new StaggeredGridLayoutManager instance, which will allow us to display the RecyclerView as a Staggered Grid layout\n\n**spanCount:** Number of columns (when it is vertical) or rows (horizontal)\n\n![](https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcRkJPFgdG0k04BwlNwbxfjMHuQt1dJ5w1tjecw4EtwzPY9ssB5PKG4Rz9dgWhAoDSTSWtE&usqp=CAU)\n\n*Unlike the GridLayoutManager, this manager does not necessarily need the items to have the same size, since it can display them depending on their content.*","params":[{"name":"spanCount","type":"Number"},{"name":"horizontal","type":"Boolean"},{"name":"reverse","type":"Boolean"}]},{"name":"Delete","description":"This block allows us to remove the indicated RecyclerView component.","params":[{"name":"id","type":"Number"}]},{"name":"GetComponentPosition","description":"Find and return the position (relative to the data list) of a component inside an item in the RecyclerView (when it is running).\n\n**id:** RecyclerView ID\n\n![](https://i.imgur.com/NzLe0Sn.png)","params":[{"name":"id","type":"Number"},{"name":"component","type":"Component"},{"name":"*","type":"Number"}]},{"name":"GetRecyclerById","description":"Returns the  RecyclerView as component","params":[{"name":"id","type":"Number"},{"name":"*","type":"RecyclerView"}]},{"name":"GetViewPosition","description":"Find and return the position (relative to the data list) of a View inside an item in the RecyclerView (when it is running).\n\n**id:** RecyclerView ID\n\n*Similar to 'GetComponentById' but focused on objects of type View*","params":[{"name":"id","type":"Number"},{"name":"view","type":"View"},{"name":"*","type":"Number"}]},{"name":"IsCreated","description":"Returns if a RecyclerView with the specified id exists.","params":[{"name":"id","type":"Number"},{"name":"*","type":"Boolean"}]},{"name":"NotifyDataSetChanged","description":"Notifies the RecyclerView that the linked list has changed.When notified, the RecyclerView will be visibly updated.","params":[{"name":"id","type":"Number"}]},{"name":"NotifyItemChanged","description":"Notifies the RecyclerView that an item in the linked list has changed.When notified, the RecyclerView will visibly update that item (if it is on screen)\n\n> This function is useless when DiffUtil is enabled (because Diffutil is responsible for managing the changes)","params":[{"name":"id","type":"Number"},{"name":"position","type":"Number"}]},{"name":"NotifyItemInserted","description":"Notifies the RecyclerView that an item in the linked list was inserted.\n\n> This function is useless when DiffUtil is enabled (because Diffutil is responsible for managing the changes)","params":[{"name":"id","type":"Number"},{"name":"position","type":"Number"}]},{"name":"NotifyItemRemoved","description":"Notifies the RecyclerView that an item in the linked list was removed. \n\n> This function is useless when DiffUtil is enabled (because Diffutil is responsible for managing the changes)","params":[{"name":"id","type":"Number"},{"name":"position","type":"Number"}]},{"name":"RootAsComponent","description":"Transforms the root into a component (widget) and returns it. This function is useful for working with integrated dynamic components.","params":[{"name":"root","type":"View"},{"name":"*","type":"WidgetComponent"}]},{"name":"RootAsContainer","description":"Transforms the root into a container(**Arrangement**) and returns it. This function is useful for working with dynamic components.","params":[{"name":"root","type":"View"},{"name":"*","type":"Container"}]},{"name":"ScrollTo","description":"This function will cause the RecyclerView to make a displacement to the indicated position.","params":[{"name":"id","type":"Number"},{"name":"position","type":"Number"}]},{"name":"SetContentComparator","params":[{"name":"id","type":"Number"},{"name":"contentComparator","type":"Text"}],"description":"*Only for DiffUtil (Enabled)*\nIt establishes the procedure in charge of carrying out the task of comparing the content of each item in the list.\n\ncontentComparator: Procedure Name\n\n> The parameters of the procedure must be the following:\n>\n> * **id** (ID of the RecyclerView required by the procedure)\n> * **oldItem**: Previous item to be compared\n> * **newItem**: New item to be compared"}],"properties":[],"shortDescription":"","group":"dynamic_recyclerview"},"group":{"title":"Dynamic Recyclerview","path":"dynamic_recyclerview","description":"This extension allows to integrate the RecyclerView widget to block platforms. It allows the creation of the widget *dynamically* allowing the creation of several instances of it and allows us to manage them quite easily.\n\nThe philosophy in the extension is that the developer can handle all the working of the RecyclerView. That is why the main functions are based and depend on the '**procedures**' that are known in the block platforms.\n\nThe extension integrates most of the functions provided in the android RecyclerView.\n\n> Visit [RecyclerView  |  Android Developers](https://developer.android.com/reference/androidx/recyclerview/widget/RecyclerView?hl=es-419) for more information\n\nIt allows accessing and configuring each of them in a simple and understandable way for the developer. In addition, due to its structure, it allows the integration of different modules in order to improve the operation of the widget.\n\n### Features\n\n* Create RecyclerViews dynamically\n* 100% control of the data flow.\n* Supports dynamic components\n* It manages 100% of the movement, being able to access the status of the movement and its current position.\n* It allows the integration of different types of design for specific items, for example, a Chat is very easy to implement due to this feature.\n* 100% control in the creation of components. The developer is responsible for creating widgets.\n* Support for different Layout Managers, they are responsible for allowing the RecyclerView to be displayed as a list, as a grid, as a ChipGroup and others.\n* Due to its structure, it allows integration with other extensions to improve the application.\n* In case something is misconfigured in the RecyclerView, the API will take care of showing the common errors that may be happening.","platforms":["Kodular","Niotron","AppInventor"],"media":null,"priceMD":"You can purchase this extension for only **$20**, by purchasing it you will also get other extensions that work with it.\nYou can fill out the following form to proceed with the purchase.\n\n> You can also make the payment through PayPal at:\n> paypal.me/ccrristopher\n> salazar6cristopher@gmail.com (PayPal)\n\nIf you cannot make the purchase through PayPal, please contact me through my accounts.\n\nIf you are from Peru, you can contact me to purchase the extension.","netCost":20,"paypalLink":null,"downloadLink":null,"parent":null,"tagColor":"#81ffc0","icon":"img/dynamic_r_icon.png","shortDescription":"This extension allows to integrate the RecyclerView widget to block platforms. It allows the creation of the widget *dynamically* allowing the creation of several instances of it and allows us to manage them quite easily.","deprecated":false},"platforms":[{"name":"Kodular","url":"https://www.kodular.io","backgroundColor":"#6800ff","textColor":"#ffffff"},{"name":"AppInventor","url":"https://appinventor.mit.edu/","backgroundColor":"#2be289","textColor":"#ffffff"},{"name":"Niotron","url":"https://niotron.com/","backgroundColor":"#ff4fdc","textColor":"#f9f9f9"}]},"__N_SSG":true}